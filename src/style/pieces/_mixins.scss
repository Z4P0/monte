// media queries
@mixin mq($breakpoint)
{
  @if $breakpoint == mobile
  {
    @media only screen and (min-width: 320px){
      @content;
    }
  }
  @else if $breakpoint == tablet
  {
    @media only screen and (min-width: 480px) {
      @content;
    }
  }
  @else if $breakpoint == netbook
  {
    @media only screen and (min-width: 768px) {
      @content;
    }
  }
  @else if $breakpoint == desktop
  {
    @media only screen and (min-width: 1024px) {
      @content;
    }
  }
}


// css3 - transition
@mixin transition($property, $time)
{
  -webkit-transition: $property $time ease-out;
  -moz-transition: $property $time ease-out;
  -o-transition: $property $time ease-out;
  transition: $property $time ease-out;
}


// css circle
@mixin circle($size, $color, $alignment:middle) {
  display: inline-block;
  vertical-align: $alignment;
  height: $size;
  width: $size;
  border-radius: $size;
  background: $color;
}


// simulate simple hover effect
@mixin hover() {
  &:hover {cursor: pointer;}
}


// clearfix
@mixin cf()
{
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {clear: both;}
}



// original author: Karl Merkli
// found: http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
// ===================================
// has been modified
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// pass in a em --> gets rems with fallback
@mixin rems($property, $values...) {
  $max: length($values);

  // string holders
  $pxValues: ''; // for pixel fallback
  $remValues: ''; // rem value

  // loop through values provided
  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));


    $pxValues: #{$pxValues + $value*16}px;
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
      $pxValues: #{$pxValues + " "};
    }
  }

  // set property value
  #{$property}: $pxValues;
  #{$property}: $remValues;
}

// pass in pixels value --> gets rems
@mixin px($property, $values...) {
  $max: length($values);

  // string holders
  $pxValues: ''; // for pixel fallback
  $remValues: ''; // rem value

  // loop through values provided
  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));


    $pxValues: #{$pxValues + $value}px;
    $remValues: #{$remValues + $value/16}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
      $pxValues: #{$pxValues + " "};
    }
  }

  // set property value
  #{$property}: $pxValues;
  #{$property}: $remValues;
}


// flexbox | from css-tricks
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}
